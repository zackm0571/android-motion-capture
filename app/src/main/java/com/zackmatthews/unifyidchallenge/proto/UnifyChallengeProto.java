// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protolib/src/main/java/com/zackmathews/protolib/UnifyChallengeProto.proto

package com.zackmatthews.unifyidchallenge.proto;

public final class UnifyChallengeProto {
  private UnifyChallengeProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface SensorDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:unifyidchallenge.SensorData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .unifyidchallenge.SensorData.SensorType sensorType = 1;</code>
     */
    boolean hasSensorType();
    /**
     * <code>required .unifyidchallenge.SensorData.SensorType sensorType = 1;</code>
     */
    com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.SensorType getSensorType();

    /**
     * <code>repeated float accelerometerReading = 2;</code>
     */
    java.util.List<java.lang.Float> getAccelerometerReadingList();
    /**
     * <code>repeated float accelerometerReading = 2;</code>
     */
    int getAccelerometerReadingCount();
    /**
     * <code>repeated float accelerometerReading = 2;</code>
     */
    float getAccelerometerReading(int index);

    /**
     * <code>repeated float rotationVectorReading = 3;</code>
     */
    java.util.List<java.lang.Float> getRotationVectorReadingList();
    /**
     * <code>repeated float rotationVectorReading = 3;</code>
     */
    int getRotationVectorReadingCount();
    /**
     * <code>repeated float rotationVectorReading = 3;</code>
     */
    float getRotationVectorReading(int index);
  }
  /**
   * Protobuf type {@code unifyidchallenge.SensorData}
   */
  public  static final class SensorData extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:unifyidchallenge.SensorData)
      SensorDataOrBuilder {
    // Use SensorData.newBuilder() to construct.
    private SensorData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SensorData() {
      sensorType_ = 1;
      accelerometerReading_ = java.util.Collections.emptyList();
      rotationVectorReading_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SensorData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.SensorType value = com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.SensorType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                sensorType_ = rawValue;
              }
              break;
            }
            case 21: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                accelerometerReading_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000002;
              }
              accelerometerReading_.add(input.readFloat());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                accelerometerReading_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                accelerometerReading_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 29: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                rotationVectorReading_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000004;
              }
              rotationVectorReading_.add(input.readFloat());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004) && input.getBytesUntilLimit() > 0) {
                rotationVectorReading_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                rotationVectorReading_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          accelerometerReading_ = java.util.Collections.unmodifiableList(accelerometerReading_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          rotationVectorReading_ = java.util.Collections.unmodifiableList(rotationVectorReading_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.internal_static_unifyidchallenge_SensorData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.internal_static_unifyidchallenge_SensorData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.class, com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.Builder.class);
    }

    /**
     * Protobuf enum {@code unifyidchallenge.SensorData.SensorType}
     */
    public enum SensorType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>ACCELEROMETER = 1;</code>
       */
      ACCELEROMETER(1),
      /**
       * <code>ROTATION_VECTOR = 11;</code>
       */
      ROTATION_VECTOR(11),
      ;

      /**
       * <code>ACCELEROMETER = 1;</code>
       */
      public static final int ACCELEROMETER_VALUE = 1;
      /**
       * <code>ROTATION_VECTOR = 11;</code>
       */
      public static final int ROTATION_VECTOR_VALUE = 11;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static SensorType valueOf(int value) {
        return forNumber(value);
      }

      public static SensorType forNumber(int value) {
        switch (value) {
          case 1: return ACCELEROMETER;
          case 11: return ROTATION_VECTOR;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SensorType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          SensorType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SensorType>() {
              public SensorType findValueByNumber(int number) {
                return SensorType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.getDescriptor().getEnumTypes().get(0);
      }

      private static final SensorType[] VALUES = values();

      public static SensorType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private SensorType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:unifyidchallenge.SensorData.SensorType)
    }

    private int bitField0_;
    public static final int SENSORTYPE_FIELD_NUMBER = 1;
    private int sensorType_;
    /**
     * <code>required .unifyidchallenge.SensorData.SensorType sensorType = 1;</code>
     */
    public boolean hasSensorType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .unifyidchallenge.SensorData.SensorType sensorType = 1;</code>
     */
    public com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.SensorType getSensorType() {
      com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.SensorType result = com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.SensorType.valueOf(sensorType_);
      return result == null ? com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.SensorType.ACCELEROMETER : result;
    }

    public static final int ACCELEROMETERREADING_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Float> accelerometerReading_;
    /**
     * <code>repeated float accelerometerReading = 2;</code>
     */
    public java.util.List<java.lang.Float>
        getAccelerometerReadingList() {
      return accelerometerReading_;
    }
    /**
     * <code>repeated float accelerometerReading = 2;</code>
     */
    public int getAccelerometerReadingCount() {
      return accelerometerReading_.size();
    }
    /**
     * <code>repeated float accelerometerReading = 2;</code>
     */
    public float getAccelerometerReading(int index) {
      return accelerometerReading_.get(index);
    }

    public static final int ROTATIONVECTORREADING_FIELD_NUMBER = 3;
    private java.util.List<java.lang.Float> rotationVectorReading_;
    /**
     * <code>repeated float rotationVectorReading = 3;</code>
     */
    public java.util.List<java.lang.Float>
        getRotationVectorReadingList() {
      return rotationVectorReading_;
    }
    /**
     * <code>repeated float rotationVectorReading = 3;</code>
     */
    public int getRotationVectorReadingCount() {
      return rotationVectorReading_.size();
    }
    /**
     * <code>repeated float rotationVectorReading = 3;</code>
     */
    public float getRotationVectorReading(int index) {
      return rotationVectorReading_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasSensorType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, sensorType_);
      }
      for (int i = 0; i < accelerometerReading_.size(); i++) {
        output.writeFloat(2, accelerometerReading_.get(i));
      }
      for (int i = 0; i < rotationVectorReading_.size(); i++) {
        output.writeFloat(3, rotationVectorReading_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, sensorType_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getAccelerometerReadingList().size();
        size += dataSize;
        size += 1 * getAccelerometerReadingList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getRotationVectorReadingList().size();
        size += dataSize;
        size += 1 * getRotationVectorReadingList().size();
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData)) {
        return super.equals(obj);
      }
      com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData other = (com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData) obj;

      boolean result = true;
      result = result && (hasSensorType() == other.hasSensorType());
      if (hasSensorType()) {
        result = result && sensorType_ == other.sensorType_;
      }
      result = result && getAccelerometerReadingList()
          .equals(other.getAccelerometerReadingList());
      result = result && getRotationVectorReadingList()
          .equals(other.getRotationVectorReadingList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasSensorType()) {
        hash = (37 * hash) + SENSORTYPE_FIELD_NUMBER;
        hash = (53 * hash) + sensorType_;
      }
      if (getAccelerometerReadingCount() > 0) {
        hash = (37 * hash) + ACCELEROMETERREADING_FIELD_NUMBER;
        hash = (53 * hash) + getAccelerometerReadingList().hashCode();
      }
      if (getRotationVectorReadingCount() > 0) {
        hash = (37 * hash) + ROTATIONVECTORREADING_FIELD_NUMBER;
        hash = (53 * hash) + getRotationVectorReadingList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code unifyidchallenge.SensorData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:unifyidchallenge.SensorData)
        com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.internal_static_unifyidchallenge_SensorData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.internal_static_unifyidchallenge_SensorData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.class, com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.Builder.class);
      }

      // Construct using com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        sensorType_ = 1;
        bitField0_ = (bitField0_ & ~0x00000001);
        accelerometerReading_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        rotationVectorReading_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.internal_static_unifyidchallenge_SensorData_descriptor;
      }

      public com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData getDefaultInstanceForType() {
        return com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.getDefaultInstance();
      }

      public com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData build() {
        com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData buildPartial() {
        com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData result = new com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.sensorType_ = sensorType_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          accelerometerReading_ = java.util.Collections.unmodifiableList(accelerometerReading_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.accelerometerReading_ = accelerometerReading_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          rotationVectorReading_ = java.util.Collections.unmodifiableList(rotationVectorReading_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.rotationVectorReading_ = rotationVectorReading_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData) {
          return mergeFrom((com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData other) {
        if (other == com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.getDefaultInstance()) return this;
        if (other.hasSensorType()) {
          setSensorType(other.getSensorType());
        }
        if (!other.accelerometerReading_.isEmpty()) {
          if (accelerometerReading_.isEmpty()) {
            accelerometerReading_ = other.accelerometerReading_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureAccelerometerReadingIsMutable();
            accelerometerReading_.addAll(other.accelerometerReading_);
          }
          onChanged();
        }
        if (!other.rotationVectorReading_.isEmpty()) {
          if (rotationVectorReading_.isEmpty()) {
            rotationVectorReading_ = other.rotationVectorReading_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureRotationVectorReadingIsMutable();
            rotationVectorReading_.addAll(other.rotationVectorReading_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        if (!hasSensorType()) {
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int sensorType_ = 1;
      /**
       * <code>required .unifyidchallenge.SensorData.SensorType sensorType = 1;</code>
       */
      public boolean hasSensorType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .unifyidchallenge.SensorData.SensorType sensorType = 1;</code>
       */
      public com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.SensorType getSensorType() {
        com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.SensorType result = com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.SensorType.valueOf(sensorType_);
        return result == null ? com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.SensorType.ACCELEROMETER : result;
      }
      /**
       * <code>required .unifyidchallenge.SensorData.SensorType sensorType = 1;</code>
       */
      public Builder setSensorType(com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData.SensorType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        sensorType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>required .unifyidchallenge.SensorData.SensorType sensorType = 1;</code>
       */
      public Builder clearSensorType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        sensorType_ = 1;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> accelerometerReading_ = java.util.Collections.emptyList();
      private void ensureAccelerometerReadingIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          accelerometerReading_ = new java.util.ArrayList<java.lang.Float>(accelerometerReading_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated float accelerometerReading = 2;</code>
       */
      public java.util.List<java.lang.Float>
          getAccelerometerReadingList() {
        return java.util.Collections.unmodifiableList(accelerometerReading_);
      }
      /**
       * <code>repeated float accelerometerReading = 2;</code>
       */
      public int getAccelerometerReadingCount() {
        return accelerometerReading_.size();
      }
      /**
       * <code>repeated float accelerometerReading = 2;</code>
       */
      public float getAccelerometerReading(int index) {
        return accelerometerReading_.get(index);
      }
      /**
       * <code>repeated float accelerometerReading = 2;</code>
       */
      public Builder setAccelerometerReading(
          int index, float value) {
        ensureAccelerometerReadingIsMutable();
        accelerometerReading_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float accelerometerReading = 2;</code>
       */
      public Builder addAccelerometerReading(float value) {
        ensureAccelerometerReadingIsMutable();
        accelerometerReading_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float accelerometerReading = 2;</code>
       */
      public Builder addAllAccelerometerReading(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureAccelerometerReadingIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, accelerometerReading_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float accelerometerReading = 2;</code>
       */
      public Builder clearAccelerometerReading() {
        accelerometerReading_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> rotationVectorReading_ = java.util.Collections.emptyList();
      private void ensureRotationVectorReadingIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          rotationVectorReading_ = new java.util.ArrayList<java.lang.Float>(rotationVectorReading_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated float rotationVectorReading = 3;</code>
       */
      public java.util.List<java.lang.Float>
          getRotationVectorReadingList() {
        return java.util.Collections.unmodifiableList(rotationVectorReading_);
      }
      /**
       * <code>repeated float rotationVectorReading = 3;</code>
       */
      public int getRotationVectorReadingCount() {
        return rotationVectorReading_.size();
      }
      /**
       * <code>repeated float rotationVectorReading = 3;</code>
       */
      public float getRotationVectorReading(int index) {
        return rotationVectorReading_.get(index);
      }
      /**
       * <code>repeated float rotationVectorReading = 3;</code>
       */
      public Builder setRotationVectorReading(
          int index, float value) {
        ensureRotationVectorReadingIsMutable();
        rotationVectorReading_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float rotationVectorReading = 3;</code>
       */
      public Builder addRotationVectorReading(float value) {
        ensureRotationVectorReadingIsMutable();
        rotationVectorReading_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float rotationVectorReading = 3;</code>
       */
      public Builder addAllRotationVectorReading(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureRotationVectorReadingIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, rotationVectorReading_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float rotationVectorReading = 3;</code>
       */
      public Builder clearRotationVectorReading() {
        rotationVectorReading_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:unifyidchallenge.SensorData)
    }

    // @@protoc_insertion_point(class_scope:unifyidchallenge.SensorData)
    private static final com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData();
    }

    public static com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<SensorData>
        PARSER = new com.google.protobuf.AbstractParser<SensorData>() {
      public SensorData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
          return new SensorData(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SensorData> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SensorData> getParserForType() {
      return PARSER;
    }

    public com.zackmatthews.unifyidchallenge.proto.UnifyChallengeProto.SensorData getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_unifyidchallenge_SensorData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_unifyidchallenge_SensorData_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\nIprotolib/src/main/java/com/zackmathews" +
      "/protolib/UnifyChallengeProto.proto\022\020uni" +
      "fyidchallenge\"\274\001\n\nSensorData\022;\n\nsensorTy" +
      "pe\030\001 \002(\0162\'.unifyidchallenge.SensorData.S" +
      "ensorType\022\034\n\024accelerometerReading\030\002 \003(\002\022" +
      "\035\n\025rotationVectorReading\030\003 \003(\002\"4\n\nSensor" +
      "Type\022\021\n\rACCELEROMETER\020\001\022\023\n\017ROTATION_VECT" +
      "OR\020\013B>\n\'com.zackmatthews.unifyidchalleng" +
      "e.protoB\023UnifyChallengeProto"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_unifyidchallenge_SensorData_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_unifyidchallenge_SensorData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_unifyidchallenge_SensorData_descriptor,
        new java.lang.String[] { "SensorType", "AccelerometerReading", "RotationVectorReading", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
